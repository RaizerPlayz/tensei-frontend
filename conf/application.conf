# This is the main configuration file for the application.
# ~~~~~

include "tensei.conf"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "de", "en" ]

# Usage of secure cookies or not
application.cookies.secure=false
# Timeout for a user session.
application.session.timeout = 4 hours

parsers.MultipartFormData.maxLength=128MB
parsers.json.maxLength=128MB
play.http.parser.maxMemoryBuffer=128MB

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#

# The base path for the H2 database file.
# It defaults to the current directory but is overriden by the value of
# `application.home`.
defaults.slick.dbs.default.path = "."
defaults.slick.dbs.default.path = ${?application.home}
# Default slick database configuration which uses the H2 embedded database.
# The
slick.dbs.default.driver      = "slick.driver.H2Driver$"
slick.dbs.default.db.driver   = "org.h2.Driver"
slick.dbs.default.db.url      = "jdbc:h2:"${defaults.slick.dbs.default.path}"/.database/tenseifrontend;CIPHER=AES;MODE=PostgreSQL"
slick.dbs.default.db.user     = "DBUSER"
slick.dbs.default.db.password = "FILEPASSWORD DBPASSWORD"

### Settings for a using a PostgreSQL database.

# Uncomment and adjust this section if you want to use a PostgreSQL database.
# Please note that data in the embedded database will not be transfered!
# Remember to comment the section above for the embedded database if you do this.
#slick.dbs.default.driver      = "slick.driver.PostgresDriver$"
#slick.dbs.default.db.driver   = "org.postgresql.Driver"
#slick.dbs.default.db.url      = "jdbc:postgresql://127.0.0.1:5432/tenseifrontend"
#slick.dbs.default.db.user     = "tensei"
#slick.dbs.default.db.password = "6yStvz73SOPd92cC8C5oIrXZOz2jbCwA"

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Enable our custom actors module to startup several actors upon boot.
play.modules.enabled += "modules.ActorsModule"

# Error handler
# ~~~~~
play.http.errorHandler = "helpers.ErrorHandler"

# CSRF configuration options
# ~~~~~
# Enable our CSRF filter!
play.http.filters = "filters.CustomFilters"

# The name of the token to use both in the session and in the request body/query
# string. Defaults to csrfToken.
# play.filters.csrf.token.name = "csrfToken"

# Whether Play should use signed CSRF tokens. Signed CSRF tokens ensure that the
# token value is randomised per request, thus defeating BREACH style attacks.
# play.filters.csrf.token.sign = true

# If configured, Play will store the CSRF token in a cookie with the
# given name, instead of in the session.
# play.filters.csrf.cookie.name = null

# If play.filters.csrf.cookie.name is set, whether the CSRF cookie should have
# the secure flag set. Defaults to the same value as play.http.session.secure.
# play.filters.csrf.cookie.secure = ${play.http.session.secure}

# In order to read tokens out of the body, Play must first buffer the body and
# potentially parse it. This sets the maximum buffer size that will be used to
# buffer the body. Defaults to 100k.
# play.filters.csrf.body.bufferSize = ${play.http.parser.maxMemoryBuffer}

# Configuration for Play's own Akka system
# ~~~~~
play.akka.actor-system = "tensei-system"
akka {
  loggers                          = ["akka.event.slf4j.Slf4jLogger"]
  loglevel                         = INFO

  log-dead-letters                 = 5
  log-dead-letters-during-shutdown = on

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      autoreceive = off
      lifecycle = on
      receive = off
      unhandled = on
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://tensei-system@"${tensei.server.hostname}":"${tensei.server.port}
    ]

    roles = [frontend]
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "localhost"
      hostname = ${?tensei.frontend.hostname}
      port = 0

      # Sets the send buffer size of the Sockets,
      # set to 0b for platform default
      send-buffer-size = 2097152b

      # Sets the receive buffer size of the Sockets,
      # set to 0b for platform default
      receive-buffer-size = 2097152b

      # Maximum message size the transport will accept, but at least
      # 32000 bytes.
      # Please note that UDP does not support arbitrary large datagrams,
      # so this setting has to be chosen carefully when using UDP.
      # Both send-buffer-size and receive-buffer-size settings has to
      # be adjusted to be able to buffer messages of maximum size.
      maximum-frame-size = 1048576b
    }
  }
}
