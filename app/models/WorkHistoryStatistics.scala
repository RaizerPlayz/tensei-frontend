/*
 * Copyright (C) 2014 - 2017  Contributors as noted in the AUTHORS.md file
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package models

import play.api.i18n.Messages

import scala.collection.immutable.Seq
import scala.concurrent.Future

/**
  * A helper class for some simple statistics regarding the work history queue.
  *
  * @param exitStatus A list of entities that describe the exit status and the related absolute frequency.
  * @param runningTime A list of entities that describe the running time and the related absolute frequency.
  * @param startedBy A list of entities that describe who started how many transformations.
  */
final case class WorkHistoryStatistics(
    exitStatus: Seq[ChartDataEntry],
    runningTime: Seq[ChartDataEntry],
    startedBy: Seq[ChartDataEntry]
)

object WorkHistoryStatistics {

  /**
    * Translates the placeholders within the statistics with actual messages.
    *
    * @param stats The statistics.
    * @param messages The messages class from a Play application that must be implicitely in scope.
    * @return A future holding the passed in statistics with translated labels.
    */
  def translateStats(
      stats: WorkHistoryStatistics
  )(implicit messages: Messages): Future[WorkHistoryStatistics] = {

    /**
      * Translate the labels for statistics entries.
      *
      * @param s The label generated by the calculation function.
      * @return A human readable lable if provided by the translation file.
      */
    def translateLabel(s: String): String =
      s match {
        case "ERROR"     => Messages("models.tcqueuehistory.error")
        case "ABORTED"   => Messages("models.tcqueuehistory.aborted")
        case "COMPLETED" => Messages("models.tcqueuehistory.completed")
        case "SECONDS"   => Messages("models.tcqueuehistory.duration.seconds", 20)
        case "MINUTE"    => Messages("models.tcqueuehistory.duration.minute")
        case "MINUTES"   => Messages("models.tcqueuehistory.duration.minutes")
        case "HOUR"      => Messages("models.tcqueuehistory.duration.hour")
        case "HOURS"     => Messages("models.tcqueuehistory.duration.hours")
        case "CRON"      => Messages("models.tcqueuehistory.started.cron")
        case "TRIGGER"   => Messages("models.tcqueuehistory.started.trigger")
        case "USER"      => Messages("models.tcqueuehistory.started.user")
        case _           => s
      }

    Future.successful {
      val es = stats.exitStatus.map(e => e.copy(label = translateLabel(e.label)))
      val rs = stats.runningTime.map(e => e.copy(label = translateLabel(e.label)))
      val ss = stats.startedBy.map(e => e.copy(label = translateLabel(e.label)))

      WorkHistoryStatistics(
        exitStatus = es,
        runningTime = rs,
        startedBy = ss
      )
    }
  }

}
